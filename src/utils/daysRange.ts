import { Execution } from '@jupiterone/integration-sdk-core';

const MILLISECONDS_ONE_DAY = 1000 * 60 * 60 * 24;

export function getLastDaySeenAfter(inputData: {
  minSinceDays: number;
  lastSuccessful?: Execution;
}) {
  const now = Date.now();
  const lastSuccessfulExecutionTime = inputData.lastSuccessful?.startedOn || 0;

  const minSinceTime = sinceDaysTime({
    now,
    sinceDays: inputData.minSinceDays,
  });

  return lastSuccessfulExecutionTime > minSinceTime
    ? isoDate(lastSuccessfulExecutionTime)
    : isoDate(minSinceTime);
}

export function getLastDaySeenBefore(inputData: { startedOn: any }) {
  return isoDate(inputData.startedOn);
}

function sinceDaysTime(input: { now: number; sinceDays: number }): number {
  return input.now - input.sinceDays * MILLISECONDS_ONE_DAY;
}

function isoDate(time: number) {
  return new Date(time).toISOString().replace(/\.\d{1,3}/, '');
}
