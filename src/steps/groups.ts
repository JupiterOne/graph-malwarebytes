import {
  createDirectRelationship,
  createIntegrationEntity,
  Entity,
  IntegrationStep,
  IntegrationStepExecutionContext,
  RelationshipClass,
} from '@jupiterone/integration-sdk-core';

import { createAPIClient } from '../client';
import { CalculatedIntegrationConfig } from '../types';
import { relationships, entities, ACCOUNT_ENTITY_DATA_KEY } from '../constants';

export function getGroupKey(id: string): string {
  return `malwarebytes_group:${id}`;
}

export async function fetchGroups({
  instance,
  jobState,
}: IntegrationStepExecutionContext<CalculatedIntegrationConfig>) {
  const apiClient = createAPIClient(instance.config);

  const accountEntity = (await jobState.getData(
    ACCOUNT_ENTITY_DATA_KEY,
  )) as Entity;

  await apiClient.iterateGroups(async (group) => {
    const groupEntity = createIntegrationEntity({
      entityData: {
        source: group,
        assign: {
          _key: getGroupKey(group.id),
          _type: entities.GROUP._type,
          _class: entities.GROUP._class,
          id: group.id,
          parentId: group.parent_id,
          name: group.name,
          machineCount: group.machines_count,
          policyId: group.policy_id,
          isDefault: group.is_default,
        },
      },
    });

    await jobState.addEntity(groupEntity);
    await jobState.addRelationship(
      createDirectRelationship({
        _class: RelationshipClass.HAS,
        from: accountEntity,
        to: groupEntity,
      }),
    );
  });
}

export const groupSteps: IntegrationStep<CalculatedIntegrationConfig>[] = [
  {
    id: 'fetch-groups',
    name: 'Fetch Groups',
    entities: [entities.GROUP],
    relationships: [relationships.ACCOUNT_HAS_GROUP],
    dependsOn: ['fetch-account'],
    executionHandler: fetchGroups,
  },
];
