import {
  createMockStepExecutionContext,
  Recording,
} from '@jupiterone/integration-sdk-testing';

import { IntegrationConfig } from '../types';
import { fetchAccountDetails } from './account';
import { fetchGroups } from './groups';
import { fetchConfigurations } from './configurations';
import { fetchEndpoints } from './endpoints';
import { fetchScanFindings } from './scan-findings';
import { setupMalwareBytesRecording } from '../../test/helpers/recording';

const DEFAULT_CLIENT_ID = 'INVALID';
const DEFAULT_CLIENT_SECRET = 'INVALID';
const DEFAULT_ACCOUNT_ID = '1ccc6346-b58e-46f5-8110-3b1612d75b18';

function createInstanceConfig(
  overrides?: Partial<IntegrationConfig>,
): IntegrationConfig {
  return {
    clientId: process.env.CLIENT_ID || DEFAULT_CLIENT_ID,
    clientSecret: process.env.CLIENT_SECRET || DEFAULT_CLIENT_SECRET,
    accountId: process.env.ACCOUNT_ID || DEFAULT_ACCOUNT_ID,
    ...overrides,
  } as IntegrationConfig;
}

jest.setTimeout(20 * 1000);

describe('MalwareBytes', () => {
  let recording: Recording;

  beforeEach(() => {
    recording = setupMalwareBytesRecording({
      directory: __dirname,
      name: 'malwarebytes_recordings',
    });
  });

  afterEach(async () => {
    await recording.stop();
  });

  test('should collect data', async () => {
    const context = createMockStepExecutionContext<IntegrationConfig>({
      instanceConfig: createInstanceConfig({
        minScannedSinceDays: '30',
        minFindingsSinceDays: '30',
      }),
    });

    // Simulates dependency graph execution.
    // See https://github.com/JupiterOne/sdk/issues/262.
    await fetchAccountDetails(context);
    await fetchGroups(context);
    await fetchConfigurations(context);
    await fetchEndpoints(context);
    await fetchScanFindings(context);

    // Review snapshot, failure is a regression
    expect({
      numCollectedEntities: context.jobState.collectedEntities.length,
      numCollectedRelationships: context.jobState.collectedRelationships.length,
      collectedEntities: context.jobState.collectedEntities,
      collectedRelationships: context.jobState.collectedRelationships,
      encounteredTypes: context.jobState.encounteredTypes,
    }).toMatchSnapshot();

    expect(
      context.jobState.collectedEntities.filter((e) =>
        e._class.includes('Account'),
      ),
    ).toMatchGraphObjectSchema({
      _class: ['Account'],
      schema: {
        additionalProperties: true,
        properties: {
          _type: { const: 'malwarebytes_account' },
          _rawData: {
            type: 'array',
            items: { type: 'object' },
          },
          name: {
            type: 'string',
          },
          displayName: {
            type: 'string',
          },
        },
      },
    });

    expect(
      context.jobState.collectedEntities.filter((e) =>
        e._class.includes('Group'),
      ),
    ).toMatchGraphObjectSchema({
      _class: ['Group'],
      schema: {
        additionalProperties: true,
        properties: {
          _type: { const: 'malwarebytes_group' },
          _rawData: {
            type: 'array',
            items: { type: 'object' },
          },
          id: {
            type: 'string',
          },
          parentId: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          machineCount: {
            type: 'number',
          },
          displayName: {
            type: 'string',
          },
          policyId: {
            type: 'string',
          },
          isDefault: {
            type: 'boolean',
          },
        },
      },
    });

    expect(
      context.jobState.collectedEntities.filter((e) =>
        e._class.includes('Configuration'),
      ),
    ).toMatchGraphObjectSchema({
      _class: ['Configuration'],
      schema: {
        additionalProperties: true,
        properties: {
          _type: { const: 'malwarebytes_configuration' },
          _rawData: {
            type: 'array',
            items: { type: 'object' },
          },
          id: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          displayName: {
            type: 'string',
          },
          isDefault: {
            type: 'boolean',
          },
        },
      },
    });

    expect(
      context.jobState.collectedEntities.filter((e) =>
        e._class.includes('HostAgent'),
      ),
    ).toMatchGraphObjectSchema({
      _class: ['HostAgent'],
      schema: {
        additionalProperties: true,
        properties: {
          _type: { const: 'malwarebytes_agent' },
          _rawData: {
            type: 'array',
            items: { type: 'object' },
          },
          name: {
            type: 'string',
          },
          machineId: {
            type: 'string',
          },
          hasAlerts: {
            type: 'boolean',
          },
          hostname: {
            type: 'string',
          },
          machineIp: {
            type: 'string',
          },
          function: {
            type: 'array',
            items: { type: 'string' },
          },
          displayName: {
            type: 'string',
          },
        },
      },
    });

    expect(
      context.jobState.collectedEntities.filter((e) =>
        e._class.includes('Finding'),
      ),
    ).toMatchGraphObjectSchema({
      _class: ['Finding'],
      schema: {
        additionalProperties: true,
        properties: {
          _type: { const: 'malwarebytes_finding' },
          _rawData: {
            type: 'array',
            items: { type: 'object' },
          },
          id: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          severity: {
            type: 'string',
          },
          numericSeverity: {
            type: 'number',
          },
          open: {
            type: 'boolean',
          },
          displayName: {
            type: 'string',
          },
          status: {
            type: 'string',
          },
          category: {
            type: 'string',
          },
        },
      },
    });
  });
});
