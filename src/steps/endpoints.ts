import {
  createDirectRelationship,
  createIntegrationEntity,
  createMappedRelationship,
  Entity,
  IntegrationStep,
  IntegrationStepExecutionContext,
  Relationship,
  RelationshipClass,
  RelationshipDirection,
} from '@jupiterone/integration-sdk-core';

import { createAPIClient } from '../client';
import {
  CalculatedIntegrationConfig,
  MalwareBytesEndpointWithAgent,
} from '../types';
import {
  relationships,
  entities,
  ACCOUNT_ENTITY_DATA_KEY,
  MAPPED_HOST_AGENT_PROTECTS_ENDPOINT,
} from '../constants';

export function getEndpointKey(id: string): string {
  return `malwarebytes_endpoint:${id}`;
}

export function getHostAgentKey(id: string): string {
  return `malwarebytes_host_agent:${id}`;
}

/**
 * Creates a mapped relationship between a HostAgent and Host. This should not be
 * used when the target is known to be an EC2 Host.
 *
 * @param serviceEntity the HostAgent that protects the host
 * @param host a HostAsset that is protected by the HostAgent
 */
export function createHostAgentProtectsHostRelationship(
  agentEntity: Entity,
  host: MalwareBytesEndpointWithAgent,
): Relationship {
  return createMappedRelationship({
    _class: RelationshipClass.PROTECTS,
    _type: MAPPED_HOST_AGENT_PROTECTS_ENDPOINT,
    _mapping: {
      sourceEntityKey: agentEntity._key,
      relationshipDirection: RelationshipDirection.FORWARD,
      targetFilterKeys: [['_class', 'hostname']],
      targetEntity: {
        _class: 'Host',
        _type: 'user_endpoint',
        _key: getEndpointKey(host.machine.id),
        id: host.machine.id,
        hostname: host.agent.host_name,
        ipAddress: host.agent.machine_ip,
        platform: host.agent.os_info.os_platform,
        osVersion: host.agent.os_info.os_version,
        osName: host.agent.os_info.os_release_name,
      },
    },
  });
}

export async function fetchEndpoints({
  instance,
  jobState,
}: IntegrationStepExecutionContext<CalculatedIntegrationConfig>) {
  const apiClient = createAPIClient(instance.config);

  const accountEntity = (await jobState.getData(
    ACCOUNT_ENTITY_DATA_KEY,
  )) as Entity;

  await jobState.iterateEntities(
    { _type: entities.GROUP._type },
    async (groupEntity) => {
      await apiClient.iterateEndpoints(
        groupEntity.displayName!,
        async (endpoint) => {
          const hostAgentEntity = createIntegrationEntity({
            entityData: {
              source: endpoint.agent,
              assign: {
                _key: getHostAgentKey(endpoint.agent.machine_id),
                _type: entities.HOST_AGENT._type,
                _class: entities.HOST_AGENT._class,
                name: endpoint.agent.host_name,
                machineId: endpoint.agent.machine_id,
                hasAlerts: endpoint.agent.has_alerts,
                hostname: endpoint.agent.host_name,
                machineIp: endpoint.agent.machine_ip,
                function: ['anti-malware', 'vulnerability-detection'],
              },
            },
          });

          await Promise.all([
            jobState.addEntity(hostAgentEntity),
            jobState.addRelationship(
              createDirectRelationship({
                _class: RelationshipClass.HAS,
                from: groupEntity,
                to: hostAgentEntity,
              }),
            ),
            jobState.addRelationship(
              createDirectRelationship({
                _class: RelationshipClass.HAS,
                from: accountEntity,
                to: hostAgentEntity,
              }),
            ),
            jobState.addRelationship(
              createHostAgentProtectsHostRelationship(
                hostAgentEntity,
                endpoint,
              ),
            ),
          ]);
        },
      );
    },
  );
}

export const endpointSteps: IntegrationStep<CalculatedIntegrationConfig>[] = [
  {
    id: 'fetch-endpoints',
    name: 'Fetch Endpoints',
    entities: [entities.ENDPOINT, entities.HOST_AGENT],
    relationships: [
      relationships.ACCOUNT_HAS_HOST_AGENT,
      relationships.GROUP_HAS_HOST_AGENT,
      relationships.HOST_AGENT_PROTECTS_ENDPOINT,
    ],
    dependsOn: ['fetch-groups'],
    executionHandler: fetchEndpoints,
  },
];
