import {
  createDirectRelationship,
  createIntegrationEntity,
  IntegrationStep,
  IntegrationStepExecutionContext,
  RelationshipClass,
} from '@jupiterone/integration-sdk-core';

import { createAPIClient } from '../client';
import { IntegrationConfig } from '../types';
import { relationships, entities, steps } from '../constants';

export function getConfigurationKey(id: string): string {
  return `malwarebytes_configuration:${id}`;
}

export async function fetchConfigurations({
  instance,
  executionHistory,
  jobState,
}: IntegrationStepExecutionContext<IntegrationConfig>) {
  const apiClient = createAPIClient(instance.config, executionHistory);

  await jobState.iterateEntities(
    { _type: entities.GROUP._type },
    async (groupEntity) => {
      const configuration = await apiClient.fetchConfigurationById(
        groupEntity.policyId as string,
      );

      if (configuration) {
        let configurationEntity = await jobState.findEntity(
          getConfigurationKey(groupEntity.policyId as string),
        );

        if (!configurationEntity) {
          configurationEntity = createIntegrationEntity({
            entityData: {
              source: configuration,
              assign: {
                _key: getConfigurationKey(configuration.id),
                _type: entities.CONFIGURATION._type,
                _class: entities.CONFIGURATION._class,
                id: configuration.id,
                name: configuration.name,
                isDefault: configuration.is_default,
              },
            },
          });
          await jobState.addEntity(configurationEntity);
        }

        await jobState.addRelationship(
          createDirectRelationship({
            _class: RelationshipClass.HAS,
            from: groupEntity,
            to: configurationEntity,
          }),
        );
      }
    },
  );
}

export const configurationSteps: IntegrationStep<IntegrationConfig>[] = [
  {
    id: steps.CONFIGURATIONS,
    name: 'Fetch Configurations',
    entities: [entities.CONFIGURATION],
    relationships: [relationships.GROUP_HAS_CONFIGURATION],
    dependsOn: [steps.GROUPS],
    executionHandler: fetchConfigurations,
  },
];
