import {
  createDirectRelationship,
  createIntegrationEntity,
  IntegrationStep,
  IntegrationStepExecutionContext,
  RelationshipClass,
} from '@jupiterone/integration-sdk-core';

import { createAPIClient } from '../client';
import { CalculatedIntegrationConfig } from '../types';
import { relationships, entities } from '../constants';

export function getConfigurationKey(id: string): string {
  return `malwarebytes_configuration:${id}`;
}

export async function fetchConfigurations({
  instance,
  jobState,
}: IntegrationStepExecutionContext<CalculatedIntegrationConfig>) {
  const apiClient = createAPIClient(instance.config);

  await jobState.iterateEntities(
    { _type: entities.GROUP._type },
    async (groupEntity) => {
      const configuration = await apiClient.fetchConfigurationById(
        groupEntity.policyId as string,
      );

      const configurationExists = await jobState.findEntity(
        getConfigurationKey(groupEntity.policyId as string),
      );

      if (!configurationExists && configuration) {
        const configurationEntity = createIntegrationEntity({
          entityData: {
            source: configuration,
            assign: {
              _key: getConfigurationKey(configuration.id),
              _type: entities.CONFIGURATION._type,
              _class: entities.CONFIGURATION._class,
              id: configuration.id,
              name: configuration.name,
              isDefault: configuration.is_default,
            },
          },
        });

        await jobState.addEntity(configurationEntity);
        await jobState.addRelationship(
          createDirectRelationship({
            _class: RelationshipClass.HAS,
            from: groupEntity,
            to: configurationEntity,
          }),
        );
      } else if (configurationExists) {
        await jobState.addRelationship(
          createDirectRelationship({
            _class: RelationshipClass.HAS,
            from: groupEntity,
            to: configurationExists,
          }),
        );
      }
    },
  );
}

export const configurationSteps: IntegrationStep<
  CalculatedIntegrationConfig
>[] = [
  {
    id: 'fetch-configurations',
    name: 'Fetch Configurations',
    entities: [entities.CONFIGURATION],
    relationships: [relationships.GROUP_HAS_CONFIGURATION],
    dependsOn: ['fetch-groups'],
    executionHandler: fetchConfigurations,
  },
];
