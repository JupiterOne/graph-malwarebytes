import {
  createDirectRelationship,
  createIntegrationEntity,
  IntegrationStep,
  IntegrationStepExecutionContext,
  RelationshipClass,
} from '@jupiterone/integration-sdk-core';

import { createAPIClient } from '../client';
import { IntegrationConfig } from '../types';
import { relationships, entities, steps } from '../constants';

export function getFindingKey(id: string): string {
  return `malwarebytes_finding:${id}`;
}

export async function fetchScanFindings({
  instance,
  executionHistory,
  jobState,
}: IntegrationStepExecutionContext<IntegrationConfig>) {
  const apiClient = createAPIClient(instance.config, executionHistory);

  await jobState.iterateEntities(
    { _type: entities.HOST_AGENT._type },
    async (hostAgentEntity) => {
      await apiClient.iterateScanFindings(
        hostAgentEntity.machineId as string,
        async (finding) => {
          if (finding) {
            const findingEntity = createIntegrationEntity({
              entityData: {
                source: finding,
                assign: {
                  _key: getFindingKey(finding.id),
                  _type: entities.FINDING._type,
                  _class: entities.FINDING._class,
                  id: finding.id,
                  name: finding.threat_name,
                  category: finding.category,
                  severity: 'normal',
                  numericSeverity: 1,
                  open: true,
                  status: finding.status,
                },
              },
            });

            await jobState.addEntity(findingEntity);
            await jobState.addRelationship(
              createDirectRelationship({
                _class: RelationshipClass.IDENTIFIED,
                from: hostAgentEntity,
                to: findingEntity,
              }),
            );
          }
        },
      );
    },
  );
}

export const scanFindingsSteps: IntegrationStep<IntegrationConfig>[] = [
  {
    id: steps.SCAN_FINDINGS,
    name: 'Fetch Scan Findings',
    entities: [entities.FINDING],
    relationships: [relationships.HOST_AGENT_IDENTIFIED_FINDING],
    dependsOn: [steps.ENDPOINTS],
    executionHandler: fetchScanFindings,
  },
];
