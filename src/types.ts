import { IntegrationInstanceConfig } from '@jupiterone/integration-sdk-core';

/**
 * Properties provided by the `IntegrationInstance.config`. This reflects the
 * same properties defined by `instanceConfigFields`.
 */
export interface IntegrationConfig extends IntegrationInstanceConfig {
  /**
   * The account's id for authentication.
   */
  accountId: string;

  /**
   * The client's id for authentication.
   */
  clientId: string;

  /**
   * The client's secret for authentication.
   */
  clientSecret: string;

  /**
   * The minimum number of days since execution time (now) to use when searching
   * for scanned web applications and hosts.
   */
  minScannedSinceDays: string;

  /**
   * The minimum number of days since execution time (now) to use when searching
   * for web app findings and host detections.
   */
  minFindingsSinceDays: string;
}

export type MalwareBytesGroup = {
  id: string;
  account_id: string;
  name: string;
  machines_count: number;
  policy_id: string;
  policy_name: string;
  updated_at: string;
  is_default: boolean;
  schedule_ids: string[];
  parent_id: string;
  root_id: string;
  child_group_count: number;
};

export type MalwareBytesConfiguration = {
  id: string;
  account_id: string;
  etag: string;
  name: string;
  expire_endpoints: number;
  contents: {
    policy: {
      startup_options: {
        timeout: number;
        toggle_on: boolean;
      };
      sirius_update_schedule: string;
      endpoint_interface_options: any;
      status: string;
      packages: any[];
      schema_version: string;
    };
  };
  created_at: string;
  updated_at: string;
  is_default: boolean;
  deny_edit: boolean;
  groups: any[];
  exclusions: any[];
};

export type MalwareBytesHostAgent = {
  is_software_update_available: boolean;
  has_alerts: boolean;
  at: string;
  machine_id: string;
  account_id: string;
  group_id: string;
  nics: {
    ips: string[];
    description: string;
    mac_address: string;
  }[];
  os_info: {
    os_type: string;
    os_version: string;
    os_platform: string;
    os_architecture: string;
    os_release_name: string;
  };
  host_name: string;
  fully_qualified_host_name: string;
  plugins: any;
  engine_version: string;
  policy_etag: string;
  started_at_local: string;
  started_at_offset: number;
  source_location: {
    city: string;
    country: string;
    country_iso: string;
    continent: string;
    accuracy_radius: number;
    point: {
      lat: number;
      lon: number;
    };
    time_zone: string;
    subdivisions: string[];
    anonymous_proxy: boolean;
  };
  machine_ip: string;
};

export type MalwareBytesEndpoint = {
  id: string;
  account: any;
  online: boolean;
  account_id: string;
  group_id: string;
  root_group_id: string;
  group_name: string;
  policy_id: string;
  policy_name: string;
  last_day_seen: string;
  isolated: boolean;
  scan_age_days: number;
  suspicious_activity_count: number;
  infection_count: number;
  reboot_required: number;
  last_scanned_at: string;
  is_deleted: boolean;
  tags: any;
};

export type PaginatedResponse = {
  aggregations: {};
  total_count: number;
  next_cursor: string;
};

export type PaginatedDataResponse<K extends string, V> = PaginatedResponse &
  {
    [P in K]: V;
  };

export type MalwareBytesEndpointWithAgent = {
  link: string;
  agent: MalwareBytesHostAgent;
  machine: MalwareBytesEndpoint;
};

export type MalwareBytesFinding = {
  id: string;
  type: [string];
  status: string;
  path: string;
  group_id: string;
  is_root_detection: boolean;
  machine_id: string;
  account_id: string;
  detection_id: string;
  scanned_at: string;
  scanned_at_offset_seconds: number;
  reported_at: string;
  threat_name: string;
  category: string;
  is_rtp_stream_event: boolean;
  cleaned_at: string;
  machine_name: string;
  trace_id: string;
  scan_id: string;
};
